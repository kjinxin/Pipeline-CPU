// Copyright (C) 1991-2012 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/07/2014 13:05:33"
                                                                                
// Verilog Test Bench template for design : lab1_121220307_MIPS4
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 us/ 1 ps
module lab1_121220307_MIPS4_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [3:0] Rd_byte_w_en;
reg clk;
reg [3:0] rd_addr;
reg [3:0] rd_in;
reg [3:0] rs_addr;
reg [3:0] rt_addr;
// wires                                               
wire [3:0]  rs_out;
wire [3:0]  rt_out;

// assign statements (if any)                          
lab1_121220307_MIPS4 i1 (
// port map - connection between master ports and signals/registers   
	.Rd_byte_w_en(Rd_byte_w_en),
	.clk(clk),
	.rd_addr(rd_addr),
	.rd_in(rd_in),
	.rs_addr(rs_addr),
	.rs_out(rs_out),
	.rt_addr(rt_addr),
	.rt_out(rt_out)
);
always
#10 clk=~clk;                                                  
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin  
clk=0;
// write in all the 32 registers                         
rd_addr=4'h0; Rd_byte_w_en=4'b0000; rd_in=4'hf; #25
rd_addr=4'h1; Rd_byte_w_en=4'b0000; rd_in=4'he; #25 
rd_addr=4'h2; Rd_byte_w_en=4'b0000; rd_in=4'hd; #25 
rd_addr=4'h3; Rd_byte_w_en=4'b0000; rd_in=4'hc; #25 
rd_addr=4'h4; Rd_byte_w_en=4'b0000; rd_in=4'hb; #25 
rd_addr=4'h5; Rd_byte_w_en=4'b0000; rd_in=4'ha; #25
rd_addr=4'h6; Rd_byte_w_en=4'b0000; rd_in=4'h9; #25
rd_addr=4'h7; Rd_byte_w_en=4'b0000; rd_in=4'h8; #25 
rd_addr=4'h8; Rd_byte_w_en=4'b0000; rd_in=4'h7; #25 
rd_addr=4'h9; Rd_byte_w_en=4'b0000; rd_in=4'h6; #25 
rd_addr=4'ha; Rd_byte_w_en=4'b0000; rd_in=4'h5; #25  
rd_addr=4'hb; Rd_byte_w_en=4'b0000; rd_in=4'h4; #25
rd_addr=4'hc; Rd_byte_w_en=4'b0000; rd_in=4'h3; #25
rd_addr=4'hd; Rd_byte_w_en=4'b0000; rd_in=4'h2; #25 
rd_addr=4'he; Rd_byte_w_en=4'b0000; rd_in=4'h1; #25 
rd_addr=4'hf; Rd_byte_w_en=4'b0000; rd_in=4'h0; #25

// read from all 32 registers
rs_addr=4'h0; #25 
rs_addr=4'h1; #25
rs_addr=4'h2; #25
rs_addr=4'h3; #25 
rs_addr=4'h4; #25 
rs_addr=4'h5; #25
rs_addr=4'h6; #25
rs_addr=4'h7; #25
rs_addr=4'h8; #25 
rs_addr=4'h9; #25
rs_addr=4'ha; #25
rs_addr=4'hb; #25 
rs_addr=4'hc; #25 
rs_addr=4'hd; #25
rs_addr=4'he; #25
rs_addr=4'hf; #25 

// use the write enable from every byte
rs_addr=4'hc; rd_addr=4'hc; Rd_byte_w_en=4'b0000; rd_in=4'h0; #25
rs_addr=4'hc; rd_addr=4'hc; Rd_byte_w_en=4'b1110; rd_in=4'h2; #25
rs_addr=4'hc; rd_addr=4'hc; Rd_byte_w_en=4'b1101; rd_in=4'ha; #25
rs_addr=4'hc; rd_addr=4'hc; Rd_byte_w_en=4'b1011; rd_in=4'hf; #25
rs_addr=4'hc; rd_addr=4'hc; Rd_byte_w_en=4'b0111; rd_in=4'he; #25
                                                
// read at the same tiem with write
rs_addr=4'hf; rd_addr=4'hf; Rd_byte_w_en=4'b0000; rd_in=4'h8; #25
rs_addr=4'h0; rd_addr=4'h0; Rd_byte_w_en=4'b0000; rd_in=4'h9; #25
rs_addr=4'h1; rd_addr=4'h1; Rd_byte_w_en=4'b0000; rd_in=4'hf; #25 
rs_addr=4'h2; rd_addr=4'h2; Rd_byte_w_en=4'b0000; rd_in=4'hc; #25 
rs_addr=4'h3; rd_addr=4'h3; Rd_byte_w_en=4'b0000; rd_in=4'h0; #25 
rs_addr=4'h4; rd_addr=4'h4; Rd_byte_w_en=4'b0000; rd_in=4'he; #25 
rs_addr=4'h5; rd_addr=4'h5; Rd_byte_w_en=4'b0000; rd_in=4'hc; #25
rs_addr=4'h6; rd_addr=4'h6; Rd_byte_w_en=4'b0000; rd_in=4'h5; #25
rs_addr=4'h7; rd_addr=4'h7; Rd_byte_w_en=4'b0000; rd_in=4'h7; #25                                           
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

