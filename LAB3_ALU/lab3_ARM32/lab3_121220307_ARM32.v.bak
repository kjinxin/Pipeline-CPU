module lab3_121220307_ARM32
(
	input [31:0] A, // the operate data A
	input [31:0] B, // the operate data B
	input [3:0] ALU_op, // the control logic
	input cin,   // the data of Shift_carry_out
	output reg [31:0] ALU_out, // the final data to output accoring the operation
	output reg Zero,  // the flag zero
	output reg Negative, // the answer is negative
	output reg Carry,  // the flag Less
	output reg Overflow // the flag overflow 
);

reg [31:0] register,tempA,tempB;
reg Less;
always @ (*)
begin
	tempA=A; tempB=B;
	if (ALU_op[0]) tempB=~tempB;
	{Carry,register}=tempA+tempB+ALU_op[0];
	Zero=(register==32'h00000000)?1:0;
	Negative=(register[31])?1:0;
	Overflow=((~tempA[31])&(~tempB[31])&register[31])|(tempA[31]&tempB[31]&(~register[31]));
	Less=(ALU_op[1])?(Overflow^Negative):Carry;
	case (ALU_op)
		4'h0: // calculate the leading zero or the leading 1's
			begin
				ALU_out=32'h00000001;
				if (ALU_op[0])
					tempA=~tempA;
				if (tempA==0)
				ALU_out=32'h00000020;
				else
				begin
				if ((tempA>>16)==0)
				begin
					ALU_out=ALU_out+16;
					tempA=tempA<<16;
				end
				if ((tempA>>24)==0)
				begin
					ALU_out=ALU_out+8;
					tempA=tempA<<8;
				end
				if ((tempA>>28)==0)
				begin
					ALU_out=ALU_out+4;
					tempA=tempA<<4;
				end
				if ((tempA>>30)==0)
				begin
					ALU_out=ALU_out+2;
					tempA=tempA<<2;
				end
				ALU_out=ALU_out-(tempA>>31);   // divide and conquer in 2 ways
				end
			end
		4'h1:  // operation xor
			begin
				ALU_out=A^B;
			end
		4'h2:   // operation or 
			begin
				ALU_out=A|B;
			end
		4'h3:  // operation not or 
			begin
				ALU_out=~(A|B);
			end
		4'h4:  // operation and 
			begin
				ALU_out=A&B;
			end
		4'h5: // operation slt or sltu
			begin
				ALU_out=(Less)?32'h11111111:32'h00000000;
			end
		4'h6:  // operation seb or seh
			begin
				if (ALU_op[0])
				begin
					if (B[15])
					ALU_out={16'h1111,B[15:0]};
					else
					ALU_out={16'h0000,B[15:0]};
				end
				else
				begin
					if (B[7])
					ALU_out={24'h111111,B[7:0]};
					else
					ALU_out={24'h000000,B[7:0]};
				end
			end
		4'h7:  // operation on add or sub
			begin
				ALU_out=register;
				Overflow=(ALU_op[1]&ALU_op[2]&ALU_op[3])?Overflow:0;
			end
		4'h8:
			begin
			end
		4'h9:
			begin
			end
		4'ha:
			begin
			end
		4'hb:
			begin
			end
		4'hc:
			begin
			end
		4'hd:
			begin
			end
		4'he:
			begin
			end
		4'hf:
			begin
			end
	endcase
end 
endmodule 